<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on blog do @azeloc</title>
    <link>https://azeloc.github.io/post/index.xml</link>
    <description>Recent content in Posts on blog do @azeloc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>pt-br</language>
    <managingEditor>fcorrea@abjur.org.br (Fernando Corrêa)</managingEditor>
    <webMaster>fcorrea@abjur.org.br (Fernando Corrêa)</webMaster>
    <atom:link href="https://azeloc.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>https://azeloc.github.io/post/2017-02-21-regressao-heterocedastica/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>fcorrea@abjur.org.br (Fernando Corrêa)</author>
      <guid>https://azeloc.github.io/post/2017-02-21-regressao-heterocedastica/</guid>
      <description>&lt;p&gt;Verificar as suposições dos modelos é muito importante quando fazemos
inferência estatística. A suposição de homocedasticidade dos modelos de
regressão linear é especialmente importante, pois modifica o cálculo de
erros padrão, intervalos de confiança e valores-p.&lt;/p&gt;

&lt;p&gt;Neste post, vou mostrar três pacotes do R que ajustam modelos da forma&lt;/p&gt;

&lt;p&gt;$$ Y_i = \beta_0 + \beta_1x_1 + \ldots + \beta_px_p + \epsilon_i $$&lt;/p&gt;

&lt;p&gt;$$ \epsilon_{i} \sim \textrm{N}(0,\sigma_i), \ i = 1,\ldots,n \ \textrm{independentes, com }\sigma_i^2 = \alpha x_i^2.  $$&lt;/p&gt;

&lt;p&gt;
Além de mostrar como se faz, também vou ilustrar o desempenho dos
pacotes em um exemplo simulado. Os modelo que gerará os dados do exemplo
terá a seguinte forma funcional&lt;/p&gt;

&lt;p&gt;$$ Y_i = \beta x_i + \epsilon_i, \ i = 1,&amp;hellip;n $$
$$ \epsilon_i \sim N(0, \sigma_i)\text{ independentes, com }\sigma_i = \alpha\sqrt{|x_i|},$$&lt;/p&gt;

&lt;p&gt;e os parâmetros do modelo serão os valores $\beta = 1$ e $\alpha = 4$.
Nesse modelo, a heterocedasticidade do modelo faz com que os pontos
desenhem um cone ao redor da reta de regressão.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)

N &amp;lt;- 1000

set.seed(11071995)
X &amp;lt;- sample((N/100):(N*3), N)
Y &amp;lt;- rnorm(N,X,4*sqrt(X))

qplot(X,Y) + 
  theme_bw(15) + 
  geom_point(color = &#39;darkorange&#39;)

X2 &amp;lt;- sqrt(X)
dataset &amp;lt;- data.frame(Y,X,X2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usando-o-pacote-gamlss&#34;&gt;Usando o pacote &lt;code&gt;gamlss&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Quando ajusta-se um GAMLSS, você pode modelar os parâmetros de locação,
escala e curtose ao mesmo tempo em que escolhe a distribuição dos dados
dentre uma grande gama de opções. Escolhendo a distribuição normal e
modelando apenas os parâmetros de locação e escala, o GAMLSS ajusta
modelos lineares normais com heterocedasticidade.&lt;/p&gt;

&lt;p&gt;No código abaixo, o parâmetro &lt;code&gt;formula = Y ~ X-1&lt;/code&gt; indica que a função de
regressão será constiuída por um preditor linear em &lt;code&gt;X&lt;/code&gt; sem intercepto.
Já o parâmetro &lt;code&gt;sigma;formula = ~X2-1&lt;/code&gt; indica que o desvio padrão será
modelado por um preditor linear em &lt;code&gt;X2&lt;/code&gt; (ou raiz de &lt;code&gt;X&lt;/code&gt;), também sem
intercepto.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(gamlss)

fit_gamlss &amp;lt;- gamlss::gamlss(formula = Y ~ X-1,
                             sigma.formula = ~X2-1,
                             data = dataset,
                             family = NO())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Conforme descrito no sumário abaixo, a estimativa de alfa está muito
abaixo do valor simulado.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(fit_gamlss)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usando-o-pacote-dglm&#34;&gt;Usando o pacote &lt;code&gt;dglm&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Quando ajusta-se um Modelo Linear Generalizado Duplo (MLGD em português
e DGLM em inglês), você tem uma flexibilidade parecida com a de um
GAMLSS. Entretanto, você não pode definir um modelo para a curtose.&lt;/p&gt;

&lt;p&gt;O código abaixo, similar ao utilizado para ajustar o GAMLSS, ajustam um
DGLM aos dados simulados.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(dglm)

fit &amp;lt;- dglm(Y~X-1, dformula = ~X2-1,data = dataset, family = gaussian, method = &#39;reml&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Novamente, verifica-se que o alfa estimado está muito distante do
verdadeiro alfa.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;summary(fit)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usando-o-pacote-rstan&#34;&gt;Usando o pacote &lt;code&gt;rstan&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://mc-stan.org/&#34;&gt;Stan&lt;/a&gt; é uma linguagem de programação voltada para
descrever e manipular objetos probabilísticos. Essa linguagem foi
projetada para tornar intuitivo e simples o ajuste de modelos
probabilísticos. A forma de descrever os problemas é particularmente
simples em inferência bayesiana.&lt;/p&gt;

&lt;p&gt;Uma das vantagens do &lt;code&gt;stan&lt;/code&gt; é que ele possui várias interfaces para &lt;code&gt;R&lt;/code&gt;.
A mais básica é o &lt;code&gt;rstan&lt;/code&gt;, que será utilizada aqui.&lt;/p&gt;

&lt;p&gt;Uma chamada a função &lt;code&gt;stan&lt;/code&gt; possui dois componentes básicos:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;um parâmetro &lt;code&gt;model_code =&lt;/code&gt;, que recebe o código na linguagem &lt;code&gt;stan&lt;/code&gt;
que descreve o modelo.&lt;/li&gt;
&lt;li&gt;um parâmetro &lt;code&gt;data =&lt;/code&gt;, que recebe uma lista contendo os inputs do
modelo, tais como dados coletados, parâmetros de distribuições a
priori, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Embora esse seja o mínimo que a função precisa, outras componentes
também podem ser passadas. O parâmetro &lt;code&gt;verbose = FALSE&lt;/code&gt; faz com que a
função não imprima nada enquanto roda e o parâmetro
&lt;code&gt;control = list(...)&lt;/code&gt; passa uma lista de parâmetros de controle para o
algoritmo de ajuste.&lt;/p&gt;

&lt;p&gt;O retorno da função &lt;code&gt;stan()&lt;/code&gt; é um objeto do tipo &lt;code&gt;stanfit&lt;/code&gt;, que pode ser
sumarizado normalmente, utilizando a função &lt;code&gt;summary()&lt;/code&gt; e a função
&lt;code&gt;plot()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O código abaixo ilustra a aplicação da função &lt;code&gt;stan()&lt;/code&gt; ao nosso exemplo.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rstan)

scode &amp;lt;- &amp;quot;data {
  int&amp;lt;lower=0&amp;gt; N;
  vector[N] y;
  vector[N] x;
}
parameters {
  real beta;
  real&amp;lt;lower=0&amp;gt; alpha;
}
model {
  beta ~ normal(0,10);
  alpha ~ gamma(1,1);

  y ~ normal(beta * x, alpha * sqrt(x));
}&amp;quot;

dados &amp;lt;- list(N = nrow(dataset), y = dataset$Y, x = dataset$X)

fit_stan &amp;lt;- rstan::stan(model_code = scode, verbose = FALSE, data = dados,
             control = list(adapt_delta = 0.99))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A figura abaixo descreve os intervalos de credibilidade obtidos para
cada parâmetro do modelo. O ponto central de cada intervalo representa
as estimativas pontuais dos parâmetros. Como se nota, a estimativa do
modelo bayesiano utilizando &lt;code&gt;stan&lt;/code&gt; está muito mais próxima das
anteriores.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;plot(fit_stan)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://azeloc.github.io/post/2017-02-22-blockbusters-de-2016/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <author>fcorrea@abjur.org.br (Fernando Corrêa)</author>
      <guid>https://azeloc.github.io/post/2017-02-22-blockbusters-de-2016/</guid>
      <description>&lt;p&gt;Em 2016, tive a impressão de que os &lt;em&gt;blockbusters&lt;/em&gt; estão um pouco piores
do que o usual. Se não fossem as companhias e os litros de manteiga na
pipoca do cinemark, muitas das minhas visitas ao cinema teriam sido um
completo desperdício de dinheiro.&lt;/p&gt;

&lt;p&gt;Será que os filmes estão piores ou eu que fiquei mais chato? Neste post
vamos deixar os dados responderem a essa questão!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h3 id=&#34;preparando-o-terreno&#34;&gt;Preparando o terreno&lt;/h3&gt;

&lt;p&gt;Responder perguntas usando dados de vez quando é uma tarefa ingrata: ou
é muito fácil ou é muito difícil. Para me certificar de que estou
fazendo a coisa do jeito fácil, vou construir minha resposta em tres
passos.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Quais dados vou usar?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Uma lista de &lt;em&gt;blockbusters&lt;/em&gt; contendo

&lt;ol&gt;
&lt;li&gt;Anos de lançamento&lt;/li&gt;
&lt;li&gt;Índices de qualidade.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Como vou obtê-los?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;scrapeando&lt;/em&gt; o box-office mojo e o rotten tomatoes usando os
pacotes do &lt;code&gt;tidyverse&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;O que vou fazer com eles?&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Um gráfico com anos no eixo das abscissas e índices de
qualidades no eixo das ordenadas.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;o-que-e-blockbuster&#34;&gt;O que é blockbuster?&lt;/h3&gt;

&lt;p&gt;Um &lt;em&gt;blockbuster&lt;/em&gt; é um filme que &lt;em&gt;almeja&lt;/em&gt; atingir uma parcela
significativa do público. Na prática, o que realmente determina se um
filme é um blockbuster é a &lt;em&gt;escala&lt;/em&gt; dos seus custos.&lt;/p&gt;

&lt;p&gt;Com essa ideia em mente, nossa lista de &lt;em&gt;blockbusters&lt;/em&gt; será obtida
considerando os 20 maiores orçamentos dos filmes dos últimos 10 anos. A
listagem completa do orçamento dos filmes está disponível em
&lt;a href=&#34;http://www.the-numbers.com/movie/budgets/all&#34;&gt;http://www.the-numbers.com/movie/budgets/all&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;O código que filtra os orçamentos está disponível abaixo&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(rvest)
library(dplyr)

&#39;http://www.the-numbers.com/movie/budgets/all&#39; %&amp;gt;% 
  html_session() %&amp;gt;% 
  html_table() %&amp;gt;% 
  first()
  
dollar2number &amp;lt;- function(s){
  stringr::str_replace_all(s,&amp;quot;[\\$,]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;% 
  as.numeric()
}

block_busters &amp;lt;-   d %&amp;gt;% 
  janitor::clean_names() %&amp;gt;% 
  filter(!is.na(release_date)) %&amp;gt;% 
  mutate(release_date = lubridate::mdy(release_date),
         release_year = lubridate::year(release_date)) %&amp;gt;% 
  mutate_at(.cols = vars(production_budget, domestic_gross, worldwide_gross),
            funs(dollar2number)) %&amp;gt;% 
  filter(release_year &amp;gt;= 2007, release_year &amp;lt;= 2016) %&amp;gt;% 
  group_by(release_year) %&amp;gt;% 
  top_n(20, production_budget)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;tomatometro&#34;&gt;Tomatômetro&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(stringr)

meters &amp;lt;- failwith(list(tomato_score = NA),function(page){
  list( tomato_score = page %&amp;gt;%
    html_nodes(&amp;quot;[id=scorePanel]&amp;quot;) %&amp;gt;%
    html_nodes(&amp;quot;[class=&#39;critic-score meter&#39;]&amp;quot;) %&amp;gt;%
    html_text()  %&amp;gt;%
    str_extract(&#39;[0-9]{1,2}\\%&#39;) %&amp;gt;%
    first,

  audience_score = page %&amp;gt;%
    html_nodes(&amp;quot;[id=scorePanel]&amp;quot;) %&amp;gt;%
    html_nodes(&amp;quot;[class=&#39;audience-score meter&#39;]&amp;quot;) %&amp;gt;%
    html_text() %&amp;gt;%
    str_extract(&#39;[0-9]{1,2}\\%&#39;)
  )
})

status &amp;lt;- block_busters %&amp;gt;% 
  mutate(clean_name = str_to_lower(movie) %&amp;gt;% 
                      str_replace_all(&amp;quot;[&#39;:’,-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;%
                      str_replace_all(&amp;quot;ep.&amp;quot;,&amp;quot;episode&amp;quot;) %&amp;gt;% 
                      str_replace_all(&amp;quot;xmen&amp;quot;,&amp;quot;x-men&amp;quot;) %&amp;gt;% 
                      str_replace_all(&amp;quot;^the&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;% 
                      str_replace_all(&amp;quot;[.-]&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;% 
                      str_replace_all(&amp;quot; &amp;quot;,&amp;quot;_&amp;quot;) %&amp;gt;% 
                      str_replace_all(&amp;quot;_+&amp;quot;,&amp;quot;_&amp;quot;) %&amp;gt;% 
                      str_replace_all(&amp;quot;^_|_$&amp;quot;,&amp;quot;&amp;quot;) %&amp;gt;% 
                      str_replace_all(&amp;quot;[—]&amp;quot;,&amp;quot;_&amp;quot;),
         link = str_c(&amp;quot;https://www.rottentomatoes.com/m/&amp;quot;,clean_name)) %&amp;gt;% 
  ungroup() %&amp;gt;% 
  mutate(id = 1:n()) %&amp;gt;% 
  group_by(link) %&amp;gt;% 
  mutate(status = meters(html_session(link))$tomato_score)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;resultado&#34;&gt;Resultado&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ggplot2)

status %&amp;gt;% 
 rename(tomato_meter = status) %&amp;gt;% 
 mutate(tomato_meter = as.numeric(str_replace_all(tomato_meter,&amp;quot;%&amp;quot;,&amp;quot;&amp;quot;))) %&amp;gt;% 
  group_by(release_year) %&amp;gt;% 
  summarise(avgtom = mean(tomato_meter, na.rm = T),
            maxtom = avgtom + 1*sd(tomato_meter, na.rm = T),
            mintom = avgtom - 1*sd(tomato_meter, na.rm = T)) %&amp;gt;% 
  ggplot(aes(x = release_year, y = avgtom, ymin = mintom, ymax = maxtom)) +
  geom_point() +
  geom_line() +
  geom_ribbon(alpha = 0.1) +
  scale_x_continuous(breaks = 2007:2016) +
  theme_bw(15) +
  xlab(&amp;quot;Ano de lançamento&amp;quot;) +
  ylab(&amp;quot;Tomatoscore médio&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pelos dados que levantei parece que fiquei mais chato mesmo! Em 2016 a
opinião geral sobre os filmes até deu uma aumentada.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>